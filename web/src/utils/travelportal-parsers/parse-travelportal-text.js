import { parseTravelportalPassengers } from "@/utils/travelportal-parsers/parse-travelportal-passengers"
import { parseTravelportalFlights } from "@/utils/travelportal-parsers/parse-travelportal-flights"
import { parseTravelportalHotels } from "@/utils/travelportal-parsers/parse-travelportal-hotels"
import { parseTravelportalCars } from "@/utils/travelportal-parsers/parse-travelportal-cars"

/**
 * Parses travel information from a given text input.
 *
 * @param {string} text - The raw travel information text.
 * @returns {Object|null} An object containing parsed passengers, flights, hotels, and cars, or null if parsing fails.
 *
 * Handles both Unix and Windows line endings.
 *
 * NOTE: This function is currently not in use.
 * It was generated by a best effort conversion from legacy code to a more readable format.
 */
export function parseTravelportalText(text) {
  const lines = text.split(/\r?\n/).map((line) => line.trim())

  const parseResult = {
    passengers: [],
    flights: [],
    hotels: [],
    cars: [],
  }

  let currentSection = null
  let sectionBuffer = []

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i]

    const sectionMatch = line.match(/^(Passenger|Flights|Hotels|Cars):$/i)
    if (sectionMatch) {
      // If there's a previous section being processed, parse its buffer
      if (currentSection && sectionBuffer.length > 0) {
        assignSection(parseResult, currentSection, sectionBuffer)
        sectionBuffer = []
      }

      currentSection = sectionMatch[1].toLowerCase()
    } else if (currentSection) {
      sectionBuffer.push(line)
    }
  }

  // After the loop, ensure the last section is processed
  if (currentSection && sectionBuffer.length > 0) {
    assignSection(parseResult, currentSection, sectionBuffer)
  }

  const hasContent = Object.values(parseResult).some((arr) => arr.length > 0)
  return hasContent ? parseResult : null
}

/**
 * Assigns parsed data to the appropriate section in the parseObject.
 *
 * @param {Object} parseObject - The main object holding all parsed data.
 * @param {string} section - The current section name.
 * @param {Array<string>} buffer - The lines belonging to the current section.
 */
function assignSection(parseObject, section, buffer) {
  switch (section) {
    case "passenger":
      parseObject.passengers = parseTravelportalPassengers(buffer)
      break
    case "flights":
      parseObject.flights = parseTravelportalFlights(buffer)
      break
    case "hotels":
      parseObject.hotels = parseTravelportalHotels(buffer)
      break
    case "cars":
      parseObject.cars = parseTravelportalCars(buffer)
      break
    default:
      break
  }
}

export default parseTravelportalText
