import { omitBy } from "lodash"

/**
 * Parses hotel information from the hotels section.
 *
 * @param {Array<string>} lines - The lines from the hotels section.
 * @returns {Array<Object>} An array of hotel objects.
 *
 * Handles both Unix and Windows line endings.
 *
 * NOTE: This function is currently not in use.
 * It was generated by a best effort conversion from legacy code to a more readable format.
 */
export function parseTravelportalHotels(lines) {
  const hotels = []
  let currentHotel = {}

  lines.split(/\r?\n/).forEach((line) => {
    const isEmptyLine = line.trim() === ""
    if (isEmptyLine) return

    // Hotel Name, City, Country
    const hotelHeaderMatch = line.match(/^(.+?),\s*(.+?),\s*(.+)$/)
    if (hotelHeaderMatch) {
      // If there's an existing hotel being built, push it to the hotels array
      if (Object.keys(currentHotel).length > 0) {
        hotels.push(currentHotel)
        currentHotel = {}
      }
      const [, hotelName, city, country] = hotelHeaderMatch
      currentHotel.hotelName = hotelName.trim()
      currentHotel.city = city.trim()
      currentHotel.country = country.trim()
      return
    }

    const checkinMatch = line.match(/^Checkin Date:\s*(\d+\s+\w+)$/)
    if (checkinMatch) {
      currentHotel.checkinDate = checkinMatch[1].trim()
      return
    }

    const checkoutMatch = line.match(/^Checkout Date:\s*(\d+\s+\w+)$/)
    if (checkoutMatch) {
      currentHotel.checkoutDate = checkoutMatch[1].trim()
      return
    }

    const rateCodeMatch = line.match(/^Rate Code:\s*(.+)$/)
    if (rateCodeMatch) {
      currentHotel.rateCode = rateCodeMatch[1].trim()
      return
    }

    const statusMatch = line.match(/^Status:\s*(.+)$/)
    if (statusMatch) {
      currentHotel.status = statusMatch[1].trim()
      return
    }

    const priceMatch = line.match(/^Price:\s*([A-Z]{3})\s*-\s*.+\s+(\d+\.\d{2})$/)
    if (priceMatch) {
      const [, currency, cost] = priceMatch
      currentHotel.currency = currency.trim()
      currentHotel.cost = cost.trim()
      return
    }
  })

  // Push the last hotel if exists
  if (Object.keys(currentHotel).length > 0) {
    hotels.push(currentHotel)
  }

  const cleanedHotels = hotels.map((hotel) => omitBy(hotel, (value) => value === ""))
  return cleanedHotels
}

export default parseTravelportalHotels
