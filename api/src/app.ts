import express, { Request, Response } from "express"
import cors from "cors"
import path from "path"
import helmet from "helmet"

import * as config from "./config"

import {
  userRouter,
  lookupRouter,
  formRouter,
  migrateRouter,
  preapprovedRouter,
  travelDeskRouter,
  travComRouter,
  reconcileRouter,
  lookupTableRouter,
  // tmpTravComRouter,
} from "./routes"
import routes from "./routes"
import { checkJwt, loadUser, databaseHealthCheckMiddleware, requestLoggerMiddleware } from "@/middleware"

var fileupload = require("express-fileupload")

const app = express()

app.use(requestLoggerMiddleware)
app.use(express.json()) // for parsing application/json
app.use(
  express.urlencoded({
    extended: true,
  })
) // for parsing application/x-www-form-urlencoded

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      "default-src": ["'self'", "https://dev-0tc6bn14.eu.auth0.com"],
      "base-uri": ["'self'"],
      "block-all-mixed-content": [],
      "font-src": ["'self'", "https:", "data:"],
      "frame-ancestors": ["'self'"],
      "img-src": ["'self'", "data:", "https:"],
      "object-src": ["'none'"],
      "script-src": ["'self'", "https://js.arcgis.com", "'unsafe-eval'"], // added https to accomodate esri components?
      "script-src-attr": ["'none'"],
      "style-src": ["'self'", "https:", "'unsafe-inline'"],
      "worker-src": ["'self'", "blob:"],
      "connect-src": ["'self'", "https://dev-0tc6bn14.eu.auth0.com"],
    },
  })
)

app.use(
  cors({
    origin: config.FRONTEND_URL,
    optionsSuccessStatus: 200,
    credentials: true,
    exposedHeaders: "Content-Disposition",
  })
)

app.use(fileupload()) // Add FormData support

if (config.NODE_ENV !== "test") {
  console.log("host: ", process.env.DB_HOST)
  console.log("user: ", process.env.DB_USER)
  console.log("psss: ", "*********")
  console.log("db name: ", process.env.DB_NAME)
}

// TODO: move these to the routes file
app.use("/api", databaseHealthCheckMiddleware)
app.use("/migrate", databaseHealthCheckMiddleware)
app.use(migrateRouter)

app.use("/api/form", checkJwt, loadUser, formRouter)
app.use("/api/user", checkJwt, loadUser, userRouter)
app.use("/api/preapproved", checkJwt, loadUser, preapprovedRouter)
app.use("/api/traveldesk", checkJwt, loadUser, travelDeskRouter)

app.use("/api/travCom", checkJwt, loadUser, travComRouter)
app.use("/api/reconcile", checkJwt, loadUser, reconcileRouter)
// app.use("/api/travel-com", checkJwt, loadUser, tmpTravComRouter);

app.use("/api/lookup", lookupRouter)
app.use("/api/lookup-tables", lookupTableRouter)

// TODO: move all routes to the same file, using simplified binding syntax for easier lookups
app.use(routes)

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, "web")))

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, "web") + "/index.html")
})

export default app
